(when (require 'powerline nil t)
  (make-face 'powerline-active3)
  (make-face 'powerline-inactive3)
  (make-face 'powerline-major-mode-active)
  (make-face 'powerline-major-mode-inactive)
  (custom-set-faces
   '(mode-line ((t (:foreground "#FFF"))))
   '(mode-line-buffer-id ((t (:foreground "#0C1B4B"))))
   '(powerline-active1 ((t (:background "#9AAFEF" :foreground "#0C1B4B" :inherit mode-line))))
   '(powerline-active2 ((t (:background "#214CCF" :inherit mode-line))))
   '(powerline-active3 ((t (:background "#0C1B4B" :inherit mode-line))))
   '(powerline-major-mode-active ((t (:foreground "green" :inherit powerline-active3))))
   '(mode-line-inactive ((t (:foreground "#AAA"))))
   '(powerline-inactive1 ((t (:background "#CAD5F7" :inherit mode-line-inactive))))
   '(powerline-inactive2 ((t (:background "#466DE2" :inherit mode-line-inactive))))
   '(powerline-inactive3 ((t (:background "#142c7b" :inherit mode-line-inactive))))
   '(powerline-major-mode-inactive ((t (:foreground "green" :inherit powerline-inactive3)))))

  (defvar powerline-major-mode-color-success "green")
  (defvar powerline-major-mode-color-error "red")
  (defvar powerline-major-mode-color-warning "yellow")
  (defvar powerline-major-mode-color-info "blue")
  (defun update-powerline-major-mode-face ()
    (let ((color (cond ((flycheck-has-current-errors-p 'error) powerline-major-mode-color-error)
                       ((flycheck-has-current-errors-p 'warning) powerline-major-mode-color-warning)
                       ((flycheck-has-current-errors-p 'info) powerline-major-mode-color-info)
                       (t powerline-major-mode-color-success))))
      (set-face-attribute 'powerline-major-mode-active nil :foreground color)
      (set-face-attribute 'powerline-major-mode-inactive nil :foreground color)))
  (add-hook 'flycheck-after-syntax-check-hook 'update-powerline-major-mode-face)
  (add-hook 'flycheck-syntax-check-failed-hook 'update-powerline-major-mode-face)

  (defun wc-line ()
    (let ((chars (if (use-region-p) (abs (- (point) (mark))) (point-max)))
          (words (if (use-region-p) (count-words-region (point) (mark)) (count-words-region (point-min) (point-max))))
          (lines (if (use-region-p) (abs (- (line-number-at-pos (point)) (line-number-at-pos (mark)))) (line-number-at-pos (point-max)))))
      (format "%d L | %d W | %d C " lines words chars)))

  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (let* ((active (or (not (boundp 'powerline-selected-window)) (powerline-selected-window-active)))
                          (mode-line (if active 'mode-line 'mode-line-inactive))
                          (face1 (if active 'powerline-active1 'powerline-inactive1))
                          (face2 (if active 'powerline-active2 'powerline-inactive2))
                          (face3 (if active 'powerline-active3 'powerline-inactive3))
                          (major-mode-face (if active 'powerline-major-mode-active 'powerline-major-mode-inactive))
                          (separator-left (intern (format "powerline-%s-%s"
                                                          powerline-default-separator
                                                          (car powerline-default-separator-dir))))
                          (separator-right (intern (format "powerline-%s-%s"
                                                           powerline-default-separator
                                                           (cdr powerline-default-separator-dir))))
                          (lhs (list
                                (powerline-raw "%*" face1 'l)
                                (powerline-buffer-id face1 'l)
                                (powerline-raw " " face1)
                                (funcall separator-left face1 face2)
                                (powerline-raw mode-line-mule-info face2 'l)
                                (powerline-raw " " face2)
                                (funcall separator-left face2 face3)
                                (powerline-major-mode major-mode-face 'l)
                                (powerline-narrow face3 'l)
                                (powerline-raw " " face3)
                                (funcall separator-left face3 mode-line)
                                (powerline-vc mode-line 'r)
                                (when (and (boundp 'which-func-mode) which-func-mode)
                                  (powerline-raw which-func-format nil 'l))))
                          (rhs (list
                                (powerline-raw global-mode-string mode-line 'r)
                                (powerline-raw (wc-line) mode-line 'r)
                                (funcall separator-right mode-line face3)
                                (powerline-raw "%4l:%3c" face3 'r)
                                (funcall separator-right face3 face2)
                                (powerline-raw " %6p" face2 'r)
                                (powerline-hud mode-line face3))))
                     (concat (powerline-render lhs)
                             (powerline-fill mode-line (powerline-width rhs))
                             (powerline-render rhs)))))))

(provide 'init-modeline)
